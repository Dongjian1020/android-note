拦截器的形式：
pre1 - pre2 - net communication - post2 - post1

----------------------------chain
Chain封装了一个流程okhttp3.internal.http.RealInterceptorChain#proceed(okhttp3.Request, okhttp3.internal.connection.StreamAllocation, okhttp3.internal.http.HttpCodec, okhttp3.internal.connection.RealConnection)：
找到要执行的interceptor
	第几个：通过chain.index来指定
如果找到了interceptor
	构建一个新的Chain（newIndex = index+1）
	执行Interceptor#intercept(newChain)
		执行 先行逻辑
		newChain.proceed
			根据自身的index，来找到要执行的interceptor
			并构建另一个newChain（newIndex+1），传递给interceptor 来允许其在合适的时间，再次通知chain
		执行 后续逻辑

则Chain.proceed流程 可被描述为：
	interceptor1-pre interceptor2-pre interceptor3-pre interceptor3-post interceptor2-post interceptor1-post
	即是：interceptor虽然没被设计为 next结构，但是 interceptor链扔可 顺序pres 逆序 posts

----------------------------interceptor
intercept举例：
class LoggingInterceptor implements Interceptor {
  	@Override 
  	public Response intercept(Interceptor.Chain chain) throws IOException {
	    Request request = chain.request();

	    //执行自身的逻辑：日志打印
	    long t1 = System.nanoTime();
	    logger.info(String.format("Sending request %s on %s%n%s",
	        request.url(), chain.connection(), request.headers()));

	    //要求chain上的其他interceptor来进行拦截
	    Response response = chain.proceed(request);

		//执行自身的逻辑：日志打印
	    long t2 = System.nanoTime();
	    logger.info(String.format("Received response for %s in %.1fms%n%s",
	        response.request().url(), (t2 - t1) / 1e6d, response.headers()));

	    return response;
	}
}

如何添加一个interceptor：
OkHttpClient.Builder#addInterceptor
