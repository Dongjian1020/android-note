参见：
Okhttp-wiki 之 Interceptors 拦截器
	http://www.jianshu.com/p/2710ed1e6b48

----------------------------chain
Chain用来值为什么会有Interceptor.Chain，其是做什么的：Chain是在指定一个流程：
chain用来找到interceptor，并执行Interceptor#intercept(Chain chain)
	interceptor如何找到：
		interceptor并没有采用 next结构，而是 所有的interceptor均保存在OkHttpClient#interceptors（或者OkHttpClient#networkInterceptors）中
		OkHttpClient#interceptors.get(chain.index)便是该interceptor
而在Interceptor#intercept(Chain chain)中
	先执行自身逻辑（后续的interceptor执行前）
	后构建chain（其指名了下一个interceptor的位置（由chain.index来表示）），并调用chain.proceed来执行 下一个interceptor
	再执行自身逻辑（后续的interceptor执行后）

----------------------------intercept举例
class LoggingInterceptor implements Interceptor {
  	@Override 
  	public Response intercept(Interceptor.Chain chain) throws IOException {
	    Request request = chain.request();

	    //在真实的 网络请求 之前：日志打印
	    long t1 = System.nanoTime();
	    logger.info(String.format("Sending request %s on %s%n%s",
	        request.url(), chain.connection(), request.headers()));

	    //要求chain上的其他interceptor来进行拦截
	    Response response = chain.proceed(request);

		//在真实的 网络请求 之后：日志打印
	    long t2 = System.nanoTime();
	    logger.info(String.format("Received response for %s in %.1fms%n%s",
	        response.request().url(), (t2 - t1) / 1e6d, response.headers()));

	    return response;
	}
}

如何添加一个interceptor：
OkHttpClient.Builder#addInterceptor

----------有哪些拦截器：
ApplicationInterceptor（对应了ApplicationInterceptorChain）
NetworkInterceptor（对应了NetworkInterceptorChain）

这两者有什么不同：
如：我们请求http://www.abc.com，则有可能会被重定向到https://www.abc.com
则，如果是application类型的，该interceptor只会被调用一次，因为其是 应用级别的拦截器（网络通信的细节对其透明）
而，如果是network类型的，该interceptor会被调用两次（因为，其参与到两次http请求）