参见：
官方Recipes
	https://github.com/square/okhttp/wiki/Recipes
Okhttp-wiki 之 Home 主页
	http://www.jianshu.com/p/d2667e156097
	以及，系列教程
OkHttp使用教程
	http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0106/2275.html
Android网络编程（五）OkHttp2.x用法全解析
	http://liuwangshu.cn/application/network/5-okhttp2x.html
鸿阳的okhttp工具
	https://github.com/hongyangAndroid/okhttp-utils
Android OkHttp完全解析 是时候来了解OkHttp了
	http://blog.csdn.net/lmj623565791/article/details/47911083
okhttp官网
	http://square.github.io/okhttp/
如何更高效地使用 OkHttp
	http://www.tuicool.com/articles/b67NZz
Android Networking I: OkHttp, Volley and Gson	
	https://medium.com/@sotti/android-networking-i-okhttp-volley-and-gson-72004efff196

--------------------------------一个全局的OkHttpClient对象
OkHttp官方文档并建议:全局使用一个OkHttpClient
即是：使用同一个httpclient来newCall

public ConfigureTimeouts() throws Exception {
    client = new OkHttpClient();
    client.setConnectTimeout(10, TimeUnit.SECONDS);
    client.setWriteTimeout(10, TimeUnit.SECONDS);
    client.setReadTimeout(30, TimeUnit.SECONDS);
}
//如果使用okhttp3.0，那么使用HttpClient.build来设置参数：
File sdcache = getExternalCacheDir();
int cacheSize = 10 * 1024 * 1024;
OkHttpClient.Builder builder = new OkHttpClient.Builder()
        .connectTimeout(15, TimeUnit.SECONDS)
        .writeTimeout(20, TimeUnit.SECONDS)
        .readTimeout(20, TimeUnit.SECONDS)
        .cache(new Cache(sdcache.getAbsoluteFile(), cacheSize));
OkHttpClient mOkHttpClient = builder.build();

针对于个别Request，自定义设置参数：
client.clone().
	setReadTimeout(500, TimeUnit.MILLISECONDS)
或者，
client.newBuilder()
	.readTimeout(500, TimeUnit.MILLISECONDS)
	.build()
	
--------------------------------get请求
//创建okHttpClient对象
OkHttpClient mOkHttpClient = new OkHttpClient();
//创建一个Request
final Request request = new Request.Builder()
                .url("https://github.com/hongyangAndroid")
                .build();
//new call
Call call = mOkHttpClient.newCall(request); 
//请求加入调度 (异步方式)
call.enqueue(
	new Callback()
        {
            @Override
            public void onFailure(Request request, IOException e)
            {
            }

            @Override
            public void onResponse(final Response response) throws IOException
            {
                    //比如我们希望获得返回的字符串，可以通过response.body().string()获取；
					//如果希望获得返回的二进制字节数组，则调用response.body().bytes()；
					//如果你想拿到返回的inputStream，则调用response.body().byteStream()
            }
        });     
        
// 如果希望同步方式call，那么：Response response = call.execute()

--------------------------------post请求
OkHttpClient client = new OkHttpClient();

String url;
String json;

//---json的body
MediaType JSON = MediaType.parse("application/json; charset=utf-8");
RequestBody body = RequestBody.create(JSON, json);

//---key-value对的body
RequestBody body = new FormEncodingBuilder()
	.add("platform", "android")
	.add("name", "bug")
	.add("subject", "XXXXXXXXXXXXXXX")
	.build();

//---上传文件
MediaType MEDIA_TYPE_MARKDOWN = MediaType.parse("text/x-markdown; charset=utf-8");
File file = new File("README.md"); 
RequestBody body = RequestBody.create(MEDIA_TYPE_MARKDOWN, file);

//---MultipartBuilder
RequestBody body = new MultipartBuilder().type(MultipartBuilder.FORM)
        .addPart(
            Headers.of("Content-Disposition", "form-data; name=\"title\""),
            RequestBody.create(null, "Square Logo"))
        .addPart(
            Headers.of("Content-Disposition", "form-data; name=\"image\""),
            RequestBody.create(MEDIA_TYPE_PNG, new File("website/static/logo-square.png")))
        .build();

Request request = new Request.Builder()
	.url(url)
	.post(body)
	.build();
Response response = client.newCall(request).execute();
if (response.isSuccessful()) {
	return response.body().string();
} else {
	throw new IOException("Unexpected code " + response);
}

关于上传文件的另外一个参见：
Android网络编程（六）OkHttp3用法全解析
	http://liuwangshu.cn/application/network/6-okhttp3.html

--------------------------------头信息
Request request = new Request.Builder()
	.url("https://api.github.com/repos/square/okhttp/issues")
	// 使用header(name, value)可以设置唯一的name、value。如果已经有值，旧的将被移除
	.header("User-Agent", "OkHttp Headers.java")
	// 使用addHeader(name, value)可以添加多值
	.addHeader("Accept", "application/json; q=0.5")
	.addHeader("Accept", "application/vnd.github.v3+json")
	.build();

Response response = client.newCall(request).execute();
if (!response.isSuccessful()){
	throw new IOException("Unexpected code " + response);
}

System.out.println("Server: " + response.header("Server"));
System.out.println("Date: " + response.header("Date"));
System.out.println("Vary: " + response.headers("Vary"));

Headers responseHeaders = response.headers();
for (int i = 0; i < responseHeaders.size(); i++) {
	System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
}	
	
--------------------------------请求取消
Call.cancel()
OkHttpClient.cancel(tag)
	而之前，使用RequestBuilder.tag(tag)来分配一个标签
	
--------------------------------响应缓存
为什么要用：
	有网的时候根据你每个接口设置的需要缓存的时间（1分钟、5分钟等）进行缓存，
	过了时间重新请求；
	没网的时候读缓存。

参见：
OkHttp使用教程
	http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0106/2275.html
使用Retrofit和Okhttp实现网络缓存。无网读缓存，有网根据过期时间重新请求
	http://www.jianshu.com/p/9c3b4ea108a7