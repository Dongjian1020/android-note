public class RetrofitUtil {
    private static class InstanceLoader {
        private static RetrofitUtil instance = new RetrofitUtil();
    }

    public static RetrofitUtil getInstance() {
        return InstanceLoader.instance;
    }

    private static final String BASE_URL = "https://api.github.com/";

    private Retrofit retrofit;
    private Retrofit.Builder builder;
    private OkHttpClient.Builder okHttpClientBuilder;

    public void init(Context context) {
        builder = new Retrofit.Builder()
                .baseUrl(BASE_URL)
                .addConverterFactory(GsonConverterFactory.create())
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create());

        initOkHttpClient(context);
        retrofit = builder.client(okHttpClientBuilder
                .build()).build();
    }

    private void initOkHttpClient(final Context context) {
        okHttpClientBuilder = new OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.SECONDS)
                .readTimeout(30, TimeUnit.SECONDS)
                .writeTimeout(10, TimeUnit.SECONDS);

        // Log信息拦截器
        // 当是debug版本时，进行开启
        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();
        loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
        //设置 Debug Log 模式
        okHttpClientBuilder.addInterceptor(loggingInterceptor);

        //设置缓存，使得，无网络时，也能显示数据
        File cacheFile = new File(context.getExternalCacheDir(), "WuXiaolongCache");
        //缓存大小
        Cache cache = new Cache(cacheFile, 1024 * 1024 * 50);
        Interceptor cacheInterceptor = new Interceptor() {
            @Override
            public Response intercept(Chain chain) throws IOException {
                Request request = chain.request();
                if (!AppUtils.networkIsAvailable(context)) {
                    request = request.newBuilder()
                            .cacheControl(CacheControl.FORCE_CACHE)
                            .build();
                }
                Response response = chain.proceed(request);
                if (AppUtils.networkIsAvailable(context)) {
                    int maxAge = 0;
                    // 有网络时 设置缓存超时时间0个小时
                    response.newBuilder()
                            .header("Cache-Control", "public, max-age=" + maxAge)
                            .removeHeader("WuXiaolong")// 清除头信息，因为服务器如果不支持，会返回一些干扰信息，不清除下面无法生效
                            .build();
                } else {
                    // 无网络时，设置超时为4周
                    int maxStale = 60 * 60 * 24 * 28;
                    response.newBuilder()
                            .header("Cache-Control", "public, only-if-cached, max-stale=" + maxStale)
                            .removeHeader("nyn")
                            .build();
                }
                return response;
            }
        };
        okHttpClientBuilder.cache(cache).addInterceptor(cacheInterceptor);
    }

    /**
     * 获得service
     * @param serviceClass
     * @param <S>
     * @return
     */
    public <S> S createService(Class<S> serviceClass) {
        return retrofit.create(serviceClass);
    }
}
