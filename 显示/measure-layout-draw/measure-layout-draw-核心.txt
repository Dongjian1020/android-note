参见：
Android应用层View绘制流程与源码分析
	http://blog.csdn.net/yanbober/article/details/46128379

-------------------------measure流程
viewgroup.measure
	viewgroup.onmeasure
		遍历 需要参与到measure的 每个子view（可能view/viewgroup类型）：
			哪些子view需要参与（参见：measure-layout-draw时机举例.txt）：
				. 该view从来没有被measure过，或，该view的measure spec（由父亲提供）变了
				. 该view（或者其子孙view）要求requestlayout
			--	
			确定出子view的measurespec
				通过：viewgroup.public static int getChildMeasureSpec(int spec, int padding, int childDimension)
					其中，spec为 viewgroup的spec，
					padding用于：
						在得到子view的measure spec时，要参照父亲的 specmode和specsize，而最终的 specsize-=该padding
						取值为：自身的padding+孩子lp.margin+usedSpace
					childmimension为：子view在 layout.xml中的 layout_width/height
			执行子view.measure，确定出子view的measured dimen
		根据子view的measured dimen 和 自身的布局方式，确定出 自身的measured dimen

view.measure
	view.onmeasure
		确定出 自身的measured dimen

确定出 自身的measured dimen 的方式：
	view.setMeasuredDimension

-------------------------layout流程
viewgroup.layout
	viewgroup.onlayout
		遍历 需要参与到layout的 每个子view（可能view/viewgroup类型）：
			哪些子view需要参与（参见：measure-layout-draw时机举例.txt）：
				. 该view从来没有被layout过，或，该view的 被layout区域（左上角定点在屏幕上的最终位置，或，大小）发生了改变
				. 该view（或者其子孙view）要求requestlayout
			--
			根据 viewgroup的布局方式 和 子view的measured dimen 来指定 子view的 上下左右 四个点的位置
			调用子view.layout(上下左右 四个点的位置) 来将子view放入到 一个rect中

view.layout
	view.onlayout
		自身被放入到 一个rect中（上下左右 四个点的位置）

-------------------------draw流程
viewgroup.draw
	background.draw
	viewgroup.ondraw
	viewgroup.dispatchdraw
		遍历 需要参与到draw的 每个子view
			哪些子view需要参与到draw：
				. 该view从来没被draw过
				. 该view调用invalidate
				. 该view（或子孙view）要求requestlayout
					对于目标view的 祖先，会调用dispatchdraw
				. view的visibility又变成了visible
				--
				则意味着：一个view参与到了measure layout，但却不一定参与到draw
			--	
			调用子view.draw
	viewgroup.ondrawscrollbars

view.draw
	viewgroup.ondraw
		绘制自身
	viewgroup.ondrawscrollbars

draw中的canvas参数，来自：
	mSurface.lockCanvas(dirty)