------------------------------FragmentTransaction.addToBackStack(@Nullable String name);
Add this transaction to the back stack.  
This means that the transaction will be remembered after it is committed, 
and will reverse its operation when later popped off the stack（当用户点击back按键时）.

一个transaction可以包含多种操作, 并且不局限于对同一个Fragment, 所以每一个transaction实际上可以是一系列对多个fragment的操作的组合.
加入到back stack中去的时候, 是把这一系列的组合作为一个原子, 加入到back stack中.
需要在commit之前
用户按Back键, 从栈中pop出一个transaction, 进行逆转操作, 可以返回上一个转换前的状态（即是：上次commit之前的状态）.

当transaction中包含了replace操作，且该transaction被添加到back stack中，那么旧的fragment将会 最底执行到ondestroyedview（并不会执行ondestroy, ondetach）
当transaction中包含了replace操作，但是该transaction并未添加到back stack中，那么旧的fragment将会 最底执行到ondetach

Fragment的back stack: 由宿主activity掌管, 每个activity一个.
而 Activity的back stack: 由系统维护, 每个task一个back stack.

------------------------------FragmentManager#popBackStack(String name, int flag)
Pop the last fragment transition from the manager's fragment back stack. If there is nothing to pop, false is returned. This function is asynchronous -- it enqueues the request to pop, but the action will not be performed until the application returns to its event loop.
Parameters:
	name - If non-null, this is the name of a previous back state to look for; if found, all states up to that state will be popped. 
		The POP_BACK_STACK_INCLUSIVE flag can be used to control whether the named state itself is popped. If null, only the top state is popped.
	flags - Either 0 or POP_BACK_STACK_INCLUSIVE.

参见：android recipe v4/2_08_CustomBack

例子：
设：tag1, tag2, tag3,tag4依次进入到backstack
此刻呈现的是，tag4对应的frag
当popBackStack(tag3, FragmentManager.POP_BACK_STACK_INCLUSIVE)时，呈现的是tag2对应的frag，
当点击back时，呈现tag1
