这里得到的Service（如：ActivityManager），是 Ixxx.Stub.Proxy的wrapper
而ServiceManager.getService()返回的是：框架层服务的remote binder

Context#getSystemService(java.lang.String)
ContextImpl#getSystemService
	SystemServiceRegistry#getSystemService
		SYSTEM_SERVICE_FETCHERS.get(name)
			在SystemServiceRegistry的static中，执行了registerService(String serviceName, Class<T> serviceClass, ServiceFetcher<T> serviceFetcher)，如：
				registerService(Context.ACCOUNT_SERVICE, AccountManager.class,
					new CachedServiceFetcher<AccountManager>() {
					@Override
					public AccountManager createService(ContextImpl ctx) {
						IBinder b = ServiceManager.getService(Context.ACCOUNT_SERVICE);
						IAccountManager service = IAccountManager.Stub.asInterface(b);
						return new AccountManager(ctx, service);
					}});
				或
				registerService(Context.ACTIVITY_SERVICE, ActivityManager.class,
						new CachedServiceFetcher<ActivityManager>() {
					@Override
					public ActivityManager createService(ContextImpl ctx) {
						return new ActivityManager(ctx.getOuterContext(), ctx.mMainThread.getHandler());
					}});
					而ActivityManager内部含有ActivityManagerService的proxy：
						ActivityManagerNative#getDefault：
						private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() {
							protected IActivityManager create() {
								IBinder b = ServiceManager.getService("activity");
								if (false) {
									Log.v("ActivityManager", "default service binder = " + b);
								}
								IActivityManager am = asInterface(b);
								if (false) {
									Log.v("ActivityManager", "default service = " + am);
								}
								return am;
							}
						};
			而会调用SystemServiceRegistry.CachedServiceFetcher#getService
			注意其构造函数：
				public CachedServiceFetcher() {
					mCacheIndex = sServiceCacheSize++;
				}
				sServiceCacheSize是在不断增加的，最终其数值为：SystemServiceRegistry的static中 执行的registerService次数
			而CachedServiceFetcher#getService内部实现为：
				public final T getService(ContextImpl ctx) {
					//ctx.mServiceCache来自：SystemServiceRegistry#createServiceCache
					final Object[] cache = ctx.mServiceCache;
					synchronized (cache) {
						// Fetch or create the service.
						Object service = cache[mCacheIndex];
						if (service == null) {
							service = createService(ctx);
							cache[mCacheIndex] = service;
						}
						return (T)service;
					}
				}
				即是：针对于每个ContextImpl，均有service的缓存列表（采用Object[]形式）
					先从该缓存列表中取，如果没有取到，再去创建（SystemServiceRegistry.CachedServiceFetcher#createService）

