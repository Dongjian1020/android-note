----------------几类anr
InputDispatching Timeout: 输入事件分发超时5s，包括按键和触摸事件。
Service Timeout:比如前台服务在20s内未执行完成；
BroadcastQueue Timeout：比如前台广播在10s内未执行完成
ContentProvider Timeout：内容提供者,在publish过超时10s;

----------------内部机制（针对于Service）：
参见：
理解Android ANR的触发原理 - Gityuan博客 | 袁辉辉博客
	http://gityuan.com/2016/07/02/android-anr/

原理（以 针对于Service 为例）：
	在创建Service时，埋下炸弹
	在Service创建完毕后，清除炸弹
	如果炸弹未被清除，则爆炸
--
ActivityManagerService#startService
	ActiveServices#startServiceLocked
		最终调用ActiveServices#realStartServiceLocked
			埋炸弹：ActiveServices#bumpServiceExecutingLocked
				ActiveServices#scheduleServiceTimeoutLocked
					ActivityManagerService#mHandler#sendMessage
						what: ActivityManagerService.SERVICE_TIMEOUT_MSG
						delay: ActiveServices#SERVICE_TIMEOUT 或 ActiveServices#SERVICE_BACKGROUND_TIMEOUT
			来构建Service：IApplicationThread#scheduleCreateService
				ActivityThread#handleCreateService
					创建Service对象，Service#onAttach, Service#onCreate
					清除炸弹：ActivityManagerService#serviceDoneExecuting
						最终调用ActiveServices#serviceDoneExecutingLocked
							ActivityManagerService#mHandler#removeMessages(ActivityManagerService.SERVICE_TIMEOUT_MSG)
如果未及时清除炸弹：
	ActiveServices#serviceTimeout

----------------日志文件
/data/anr/traces.txt

----------------处理anr
针对三种不同的情况, 一般的处理情况如下

主线程阻塞的
开辟单独的子线程来处理耗时阻塞事务.

CPU满负荷, I/O阻塞的
I/O阻塞一般来说就是文件读写或数据库操作执行在主线程了, 也可以通过开辟子线程的方式异步执行.

内存不够用的
增大VM内存, 使用largeHeap属性, 排查内存泄露(这个在内存优化那篇细说吧)等.