参见：
http://blog.csdn.net/xiao__gui/article/details/11579087
http://hukai.me/android-performance-oom/

IntentService是Service的子类，比普通的Service增加了额外的功能。

为什么要使用intentservice
(下文来自：http://hukai.me/android-performance-oom/)
如果你的应用需要在后台使用service，除非它被触发并执行一个任务，否则其他时候Service都应该是停止状态。
另外需要注意当这个service完成任务之后因为停止service失败而引起的内存泄漏。 
当你启动一个Service，系统会倾向为了保留这个Service而一直保留Service所在的进程。这使得进程的运行代价很高，因为系统没有办法把Service所占用的RAM空间腾出来让给其他组件，另外Service还不能被Paged out。
这减少了系统能够存放到LRU缓存当中的进程数量，它会影响应用之间的切换效率，甚至会导致系统内存使用不稳定，从而无法继续保持住所有目前正在运行的service。 
建议使用IntentService，它会在处理完交代给它的任务之后尽快结束自己。更多信息，请阅读Running in a Background Service。
--
先看Service本身存在两个问题：  
Service不会专门启动一条单独的进程，Service与它所在应用位于同一个进程中；  
Service也不是专门一条新线程，因此不应该在Service中直接处理耗时的任务；  
  
IntentService特征 
1、IntentService 会创建一个线程，来处理所有传给onStartCommand()的Intent请求。
2、对于startService()请求执行onHandleIntent()中的耗时任务，会生成一个队列，每次只有一个Intent传入onHandleIntent()方法并执行。也就是同一时间只会有一个耗时任务被执行，其他的请求还要在后面排队， onHandleIntent()方法不会多线程并发执行。
3、当所有startService()请求被执行完成后，IntentService 会自动销毁，所以不需要自己写stopSelf()或stopService()来销毁服务。
4、提供默认的onBind()实现 ，即返回null，不适合绑定的 Service。
5、提供默认的 onStartCommand() 实现，将intent传入等待队列中，然后到onHandleIntent()的实现。所以如果需要重写onStartCommand() 方法一定要调用父类的实现。
