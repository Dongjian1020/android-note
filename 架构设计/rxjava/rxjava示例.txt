
------------------------------------例子1
/创建一个被观察者（开关）
Observable switcher=Observable.create(new Observable.OnSubscribe<String>(){
    @Override
    public void call(Subscriber<? super String> subscriber) {
        subscriber.onNext("On");
        subscriber.onNext("Off");
        subscriber.onNext("On");
        subscriber.onNext("On");
        subscriber.onCompleted();
    }
});

//创建一个观察者（台灯）
Subscriber light=new Subscriber<String>() {
    @Override
    public void onCompleted() {
        //被观察者的onCompleted()事件会走到这里;
        Log.d("DDDDDD","结束观察...\n");
    }

    @Override
    public void onError(Throwable e) {
            //出现错误会调用这个方法
    }
    @Override
    public void onNext(String s) {
        //处理传过来的onNext事件
        Log.d("DDDDD","handle this---"+s)
    }
}

//订阅
switcher.subscribe(light);

------------------------------------例子2
Observable.just(1, 2, 3, 4) // IO 线程，由 subscribeOn() 指定
    .subscribeOn(Schedulers.io())
    .observeOn(Schedulers.newThread())
    .map(mapOperator) // 新线程，由 observeOn() 指定
    .observeOn(Schedulers.io())
    .map(mapOperator2) // IO 线程，由 observeOn() 指定
    .observeOn(AndroidSchedulers.mainThread) 
    .subscribe(subscriber);  // Android 主线程，由 observeOn() 指定